<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="DESKTOP-HF1AAIU" failures="0" tests="19" name="BookStore API Tests" time="0.994" errors="0" timestamp="2025-08-16T13:09:45 IST">
  <testcase classname="com.bookapi.testcases.HealthCheckTest" name="@BeforeTest validatingServiceHealth" time="0.603">
    <failure type="java.lang.NullPointerException" message="Cannot invoke &amp;quot;com.aventstack.extentreports.ExtentTest.info(String)&amp;quot; because the return value of &amp;quot;com.bookapi.report.ExtentFactory.getExtentTest()&amp;quot; is null">
      <![CDATA[java.lang.NullPointerException: Cannot invoke "com.aventstack.extentreports.ExtentTest.info(String)" because the return value of "com.bookapi.report.ExtentFactory.getExtentTest()" is null
at com.bookapi.logs.WrappedReportLogger.trace(WrappedReportLogger.java:16)
at com.bookapi.testcases.HealthCheckTest.validatingServiceHealth(HealthCheckTest.java:20)
... Removed 24 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeTest validatingServiceHealth -->
  <testcase classname="com.bookapi.testcases.CreateUserSignupTest" name="createNewUser" time="0.0">
    <skipped/>
  </testcase> <!-- createNewUser -->
  <testcase classname="com.bookapi.testcases.CreateUserSignupTest" name="createExistingUser" time="0.0">
    <skipped/>
  </testcase> <!-- createExistingUser -->
  <testcase classname="com.bookapi.testcases.LoginForAccessTokenTest" name="loginUsingnewlyCreatedUser" time="0.0">
    <skipped/>
  </testcase> <!-- loginUsingnewlyCreatedUser -->
  <testcase classname="com.bookapi.testcases.LoginForAccessTokenTest" name="loginUsingIncorrectCred" time="0.0">
    <skipped/>
  </testcase> <!-- loginUsingIncorrectCred -->
  <testcase classname="com.bookapi.testcases.LoginForAccessTokenTest" name="loginUsingIncorrectCred" time="0.0">
    <skipped/>
  </testcase> <!-- loginUsingIncorrectCred -->
  <testcase classname="com.bookapi.testcases.LoginForAccessTokenTest" name="loginUsingIncorrectCred" time="0.0">
    <skipped/>
  </testcase> <!-- loginUsingIncorrectCred -->
  <testcase classname="com.bookapi.testcases.LoginForAccessTokenTest" name="loginUsingIncorrectCred" time="0.0">
    <skipped/>
  </testcase> <!-- loginUsingIncorrectCred -->
  <testcase classname="com.bookapi.testcases.GetAllBooksTest" name="validatingBooksAreDisplayed" time="0.001">
    <skipped/>
  </testcase> <!-- validatingBooksAreDisplayed -->
  <testcase classname="com.bookapi.testcases.GetAllBooksTest" name="NoBooksDisplayedForInvalidToken" time="0.0">
    <skipped/>
  </testcase> <!-- NoBooksDisplayedForInvalidToken -->
  <testcase classname="com.bookapi.testcases.GetAllBooksTest" name="NoBooksDisplayedForNoToken" time="0.0">
    <skipped/>
  </testcase> <!-- NoBooksDisplayedForNoToken -->
  <testcase classname="com.bookapi.testcases.CreateBookTest" name="validatingUserAbleToCreateNewBook" time="0.0">
    <skipped/>
  </testcase> <!-- validatingUserAbleToCreateNewBook -->
  <testcase classname="com.bookapi.testcases.CreateBookTest" name="validatingNewBookIsDisplayedInList" time="0.001">
    <skipped/>
  </testcase> <!-- validatingNewBookIsDisplayedInList -->
  <testcase classname="com.bookapi.testcases.GetBookByIdTest" name="validatingIfUserAbleToSearchBookByID" time="0.0">
    <skipped/>
  </testcase> <!-- validatingIfUserAbleToSearchBookByID -->
  <testcase classname="com.bookapi.testcases.GetBookByIdTest" name="validatingIfUserAbleToSearchIncorrectBookByID" time="0.0">
    <skipped/>
  </testcase> <!-- validatingIfUserAbleToSearchIncorrectBookByID -->
  <testcase classname="com.bookapi.testcases.UpdateBookTest" name="validateUserAbleToUpdateNewlyAddedBook" time="0.0">
    <skipped/>
  </testcase> <!-- validateUserAbleToUpdateNewlyAddedBook -->
  <testcase classname="com.bookapi.testcases.UpdateBookTest" name="validatingIfUserAbleToSearchUpdatedBookByID" time="0.0">
    <skipped/>
  </testcase> <!-- validatingIfUserAbleToSearchUpdatedBookByID -->
  <testcase classname="com.bookapi.testcases.DeleteBookTest" name="validatingIfUserAbleToDeleteBookByID" time="0.0">
    <skipped/>
  </testcase> <!-- validatingIfUserAbleToDeleteBookByID -->
  <testcase classname="com.bookapi.testcases.DeleteBookTest" name="validatingIfUserAbleToDeleteBookByIDAgain" time="0.0">
    <skipped/>
  </testcase> <!-- validatingIfUserAbleToDeleteBookByIDAgain -->
  <testcase classname="com.bookapi.testcases.IncorrectJsonFormat" name="incorrectJSON" time="0.0">
    <skipped/>
  </testcase> <!-- incorrectJSON -->
</testsuite> <!-- BookStore API Tests -->
